# -*- coding: utf-8 -*-
"""UAS_AI_VITA LESTARI_STI202202968_ PREDIKSI KONSUMSI LISTRIK RUMAH TANGGA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_L1OlryZ3lgpiE6R0p_p7b7MUmkTrCNA
"""



import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# 1. Load dataset
df = pd.read_csv('listrik_rumah.csv')
df = df.drop(columns=['tanggal'])  # drop tanggal (kita pakai urutan waktu)

# 2. Normalisasi
scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(df)

# 3. Fungsi pembentukan sequence time series
def create_sequences(data, window_size=7):
    X, y = [], []
    for i in range(len(data) - window_size):
        X.append(data[i:i+window_size, :])     # semua fitur
        y.append(data[i+window_size, -1])      # target: konsumsi_listrik_kwh
    return np.array(X), np.array(y)

# 4. Buat sequence (pakai 7 hari sebelumnya untuk prediksi hari ke-8)
window_size = 7
X, y = create_sequences(data_scaled, window_size)

# 5. Split data
split = int(0.8 * len(X))
X_train, y_train = X[:split], y[:split]
X_test, y_test = X[split:], y[split:]

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Input

model = Sequential()
model.add(Input(shape=(X_train.shape[1], X_train.shape[2])))  # Input shape = (timesteps, features)
model.add(LSTM(64))
model.add(Dense(1))  # Output 1 nilai (misalnya prediksi listrik)

model.compile(optimizer='adam', loss='mse')

# 7. Training
history = model.fit(X_train, y_train, epochs=100, batch_size=8, validation_split=0.1)

# 8. Prediksi
y_pred = model.predict(X_test)

# 9. Denormalisasi prediksi (khusus target kolom)
target_scaler = MinMaxScaler()
target_scaler.min_, target_scaler.scale_ = scaler.min_[-1], scaler.scale_[-1]
y_pred_actual = target_scaler.inverse_transform(y_pred)
y_test_actual = target_scaler.inverse_transform(y_test.reshape(-1, 1))

# 10. Evaluasi
rmse = np.sqrt(mean_squared_error(y_test_actual, y_pred_actual))
print(f"RMSE: {rmse:.2f} kWh")

# 11. Plot
plt.plot(y_test_actual, label='Actual')
plt.plot(y_pred_actual, label='Predicted')
plt.legend()
plt.title('Prediksi Konsumsi Listrik (LSTM)')
plt.xlabel('Hari')
plt.ylabel('kWh')
plt.show()